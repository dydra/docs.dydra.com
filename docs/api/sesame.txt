Sesame API
==========

Dydra supports Version 2 of the [Sesame HTTP
API](http://www.openrdf.org/doc/sesame2/system/ch08.html).
There are some noteable changes and additions in the Dydra.com
Sesame API implmentation that have been documented below.

## Content Types

The following RDF document formats are accepted:

* RDF/XML
  * application/rdf+xml
* N-Triples
  * text/plain
* Turtle
  * application/x-turtle
* N3
  * text/rdf+n3

The following variable binding formats are accepted:

* [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/)
  * Mime type: application/sparql-results+xml
* [SPARQL Query Results JSON Format](http://www.w3.org/TR/rdf-sparql-json-res/)
  * Mime type: application/sparql-results+json

_**Please note:** the binary RDF results table format is currently not supported._

The following boolean result formats are accepted:

* [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/)
  * Mime type: application/sparql-results+xml
  * Mime type: application/sparql-results+json
* Plain text boolean result formats
  * Mime type: text/boolean

## Sesame API URL Overview

The root dydra.com URL (`http://dydra.com`) serves as the base Sesame API
url.  This is referred to as the `<SESAME_URL>` in the original OpenRDF Sesame
API documentation as well as this documentation page.

Your repository ID, referred to here as `<REPO_ID>`, is a combination of your
account name and the repository name separated by a forward slash ("`/`").  For example,
the repository ID for jhacker's foaf repository is `jhacker/foaf`.

Dydra currently supports the following Sesame API methods.

* 8.2 Protocol summary
  * `GET /protocol`
* 8.3 Repository list
  * `GET /repositories`
* 8.4 Repository queries
  * `GET /repositories/<REPO_ID>`
  * `POST /repositories/<REPO_ID>`
* 8.5 Repository statements
  * `GET /repositories/<REPO_ID>/statements`
  * `POST /repositories/<REPO_ID>/statements`
  * `PUT /repositories/<REPO_ID>/statements`
  * `DELETE /repositories/<REPO_ID>/statements`
* 8.6 Context lists
  * `GET /repositories/<REPO_ID>/contexts`
* 8.7 Namespace declaration lists
  * `GET /repositories/<REPO_ID>/namespaces`
  * `DELETE /repositories/<REPO_ID>/namespaces`
* 8.8 Namespace delcarations
  * `GET /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * `PUT /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * `DELETE /repositories/<REPO_ID>/namespaces/<PREFIX>`
* 8.9 Repository Size
  * `GET /repositories/<REPO_ID>/size`

Additionally, Dydra implements several additional API methods as documented below.

* Create a repository
  * `PUT /repositories/<REPO_ID>`
* Delete a repository
  * `DELETE /repositories/<REPO_ID>`
* Get repository Meta Data
  * `GET /repositories/<REPO_ID>/meta`
* Update repository Meta Data
  * `PUT /repositories/<REPO_ID>/meta`
* Repository import status
  * `GET /repositories/<REPO_ID>/status`

## Protocol summary (8.2)

**Request path:**

* `GET /protocol`
  * Returns the current protocol version implemented by Dydra.

**Curl Example: Obtaining the current protocol version**

    curl http://dydra.com/protocol

**Sample Request**

    GET /protocol HTTP/1.1
    Host: dydra.com

**Sample Response**

    HTTP/1.1 200 OK
    Content-Type: text/plain; charset=utf-8
    Content-Length: 1

    4

## Repository List (8.3)

**Request paths:**

* `GET /repositories`
* `GET /repositories/<account>`

The first path will return all repositories visible to you. This includes
public repositories. The second form filters the repositories to the account
specified. (See repository permissions document)

**Curl Example: Showing all repositories**

    curl -H 'Accept: application/sparql-results+xml' \
         http://dydra.com/repositories

**Sample Request**

    GET /repositories HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

**Sample Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    <?xml version='1.0' encoding='UTF-8'?>
    <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
      <head>
        <variable name='uri'/>
        <variable name='id'/>
        <variable name='title'/>
        <variable name='readable'/>
        <variable name='writable'/>
      </head>
      <results ordered='false' distinct='false'>
        <result>
          <binding name='uri'>
            <uri>http://dydra.com/jhacker/foaf</uri>
          </binding>
          <binding name='id'>
            <literal>jhacker/foaf</literal>
          </binding>
          <binding name='title'>
            <literal>foaf</literal>
          </binding>
          <binding name='readable'>
            <literal datatype='http://www.w3.org/2001/XMLSchema#boolean'>true</literal>
          </binding>
          <binding name='writable'>
            <literal datatype='http://www.w3.org/2001/XMLSchema#boolean'>false</literal>
          </binding>
        </result>
      </results>
    </sparql>

**Curl Example: Showing repositories for one account**

    curl -H 'Accept: application/sparql-results+xml' \
         http://dydra.com/repositories/jhacker

**Sample Request**

    GET /repositories/jhacker HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

**Sample Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    [SPARQL XML BINDINGS]

## Repository Queries (8.4)

**Request paths:**

* `GET /repositories/<account>/<repo>`
* `POST /repositories/<account>/<repo>`

_**Please note:** At this time, Dydra does not currently support the SeRQL query syntax. All
queries will assume the SPARQL syntax._

_**Please note:** the `queryLn`, `infer`, and `$<varname>` parameters are not yet supported for
this method._

**Curl Example: Querying a repository**

    curl -H 'Accept: application/sparql-results+xml' \
         -d 'query=select * where {?s ?p ?o}' \
         http://dydra.com/repositories/jhacker/foaf

**Sample Request**

    POST /repositories/jhacker/foaf HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

    query=select%20*%20where%20%7B%3Fs%20%3Fp%20%3Fo%7D

**Sample Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    [SPARQL XML BINDINGS]

## Repository Statements (8.5)

**Parameters:**

* `subj` (optional): Restricts a GET or DELETE operation to statements with the specified N-Triples encoded resource as subject.
* `pred` (optional): Restricts a GET or DELETE operation to statements with the specified N-Triples encoded URI as predicate.
* `obj` (optional): Restricts a GET or DELETE operation to statements with the specified N-Triples encoded value as object.
* `context` (optional): If specified, restricts the operation to one or more specific contexts in the repository. The value of this parameter is either an N-Triples encoded URI or bnode ID, or the special value 'null' which represents all context-less statements. If multiple 'context' parameters are specified, the request will operate on the union of all specified contexts. The operation is executed on all statements that are in the repository if no context is specified.
* `baseURI` (optional): Specifies the base URI to resolve any relative URIs found in uploaded data against. This parameter only applies to the PUT and POST method.

_**Please note:** the `infer` parameter specified in the OpenRDF Sesame API
documentation is not supported on Dydra._

_**Please note:** Transaction documents are currently not supported._

**Request paths:**

* `GET /repositories/<account>/<repo>/statements`
  * Fetches statements from the repository.
* `POST /repositories/<account>/<repo>/statements`
  * Adds given triples to the repository.
* `PUT /repositories/<account>/<repo>/statements`
  * Updates or adds the given triples to the repository.
* `DELETE /repositories/<account>/<repo>/statements`
  * Removes statements from the repository.

**Curl Example: Fetching all statements from a repository as N-Triples**

    curl -H 'Accept: text/plain' \
         http://dydra.com/repositories/jhacker/foaf/statements

**Sample Request**

    GET /repositories/jhacker/foaf/statements HTTP/1.1
    Host: dydra.com
    Accept: text/plain

**Sample Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: text/plain; charset=utf-8

    [N-TRIPLES RDF DOCUMENT]

**Curl Example: Adding N-Triples statements to a repository**

    curl -H 'Content-Type: text/plain' \
         -d '<http://example.org#jhacker> <http://xmlns.com/foaf/0.1/nick> "jhuckabee" .' \
         http://dydra.com/repositories/jhacker/foaf/statements

**Sample Request**

    POST /repositories/jhacker/foaf/statements HTTP/1.1
    Host: dydra.com
    Content-Type: text/plain

    <http://example.org#jhacker> <http://xmlns.com/foaf/0.1/nick> "jhuckabee" .

**Sample Response**

    HTTP/1.1 204 NO CONTENT

## Context lists (8.6)

**Request path:**

* `GET /repositories/<REPO_ID>/contexts`
  * List all contexts contained within the repository.

**Curl Example: Obtaining all contexts in a repository**

    curl -H 'Accept: application/sparql-results+xml' \
         http://dydra.com/repositories/jhacker/foaf/contexts

## Namespace declaration lists (8.7)

_**Please note:** In addition to repository level namespace definitions, Dydra
also supports account level namespace definitions which apply across all repositories
belonging to that account.  The namespace API methods mentioned here and in section 8.8
refer only to those namespaces declared on the repository.  See the
[namespace prefixes](/namespace-prefixes) documentation for more details._

**Request paths:**

* `GET /repositories/<REPO_ID>/namespaces`
  * Get all namespaces defined for the given repository.
* `DELETE /repositories/<REPO_ID>/namespaces`
  * Remove all namespaces from the given repository.

**Curl Example, obtaining all namespaces defined for a given repository**

    curl -H 'Accept: application/sparql-results+xml' \
         http://dydra.com/repositories/jhacker/foaf/namespaces

**Curl Example, clearing all namespaces in a repository**

    curl -X DELETE -H 'Accept: application/sparql-results+xml' \
         http://dydra.com/repositories/jhacker/foaf/namespaces

## Namespace delcarations (8.8)

**Request paths:**

* `GET /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * Returns the identifier for the given prefix.
* `PUT /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * Updates or adds the identified prefix.
* `DELETE /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * Remove the prefixes from the repository prefix list.

**Curl Example: Obtaining the identifier for a specific namespace**

    curl http://dydra.com/repositories/jhacker/foaf/namespaces/rdf

**Curl Example: Updating or adding a namespace**

    curl -X PUT -d 'http://example.org#' \
         http://dydra.com/repositories/jhacker/foaf/namespaces/example

**Curl Example: Removing a namespace from a repository**

    curl -X DELETE http://dydra.com/repositories/jhacker/foaf/namespaces/example

## Repository Size (8.9)

**Request path:**

* `GET /repositories/<REPO_ID>/size`
  * Returns the total number of triples in the repository.

_**Please note:** Dydra's implementation of this method currently does not support the `context` parameter specified in the OpenRDF Sesame API spec._

**Curl Example, Obtaining the number of triples in a repository**

    curl http://dydra.com/repositories/jhacker/foaf/size

## Creating a Repository

**Parameters:**

* `summary` (optional): A summary of the data contained within the repository.
* `homepage` (optional): A URL to the repository's home page.
* `description` (optional): A long form description the repository. This description can contain markdown formatting.

**Request path:**

* `PUT /repositories/<REPO_ID>`
  * Creates a new repository

**Curl Example: Creating a new repository**

    curl -X PUT -H 'Accept: application/sparql-results+json' \
         -d "summary=A test summary." \
         http://dydra.com/repositories/jhacker/xyz_repository

## Deleting a Repository

**Request path:**

* `DELETE /repositories/<REPO_ID>`
  * Deletes a new repository

**Curl Example: Deleting a repository**

    curl -X DELETE -H 'Accept: text/plain' \
         http://dydra.com/repositories/jhacker/xyz_repository

## Repository Meta Data

**Request path:**

* `GET /repositories/<REPO_ID>/meta`
  * Obtain repository meta data

**Curl Example: Getting repository meta data**

    curl -H 'Accept: application/sparql-results+json' \
         http://dydra.com/repositories/jhacker/xyz_repository/meta

## Updating Repository Meta Data

**Parameters:**

* `summary` (optional): A summary of the data contained within the repository.
* `homepage` (optional): A URL to the repository's home page.
* `description` (optional): A long form description the repository. This description can contain markdown formatting.

**Request path:**

* `PUT /repositories/<REPO_ID>/meta`
  * Updating repository meta data

**Curl Example: Updating repository meta data**

    curl -X PUT -H 'Accept: application/sparql-results+json' \
         -d "summary=A test summary." \
         http://dydra.com/repositories/jhacker/xyz_repository/meta

## Repository Import Status

**Request path:**

* `GET /repositories/<REPO_ID>/status`
  * Returns the import status for the given repository. Possible return values are "0" or "1". Status "0" indicates no import is currently taking place. A status of "1" indicates that an import is currently in progress.

**Curl Example, Obtaining the import status of a repository**

    curl http://dydra.com/repositories/jhacker/foaf/status
