Sesame API
==========

Dydra supports the [Sesame 2.0 HTTP API][]. There are some notable additions
in our Sesame API implementation that are documented below.

Authentication
--------------

Please see the [API Authentication](/api/authentication) documentation for a
reference on authenticating to Dydra's Sesame API.

Content Types
-------------

The following RDF graph serializations are supported by the Sesame API
implementation:

* RDF/XML
  * MIME type: `application/rdf+xml`
* N-Triples
  * MIME type: `text/plain`
* Turtle
  * MIME type: `application/x-turtle`
* Notation3
  * MIME type: `text/rdf+n3`

The following SPARQL tuple resultset formats are accepted:

* [SPARQL Query Results XML Format](http://www.w3.org/TR/rdf-sparql-XMLres/)
  * MIME type: `application/sparql-results+xml`
* [SPARQL Query Results JSON Format](http://www.w3.org/TR/rdf-sparql-json-res/)
  * MIME type: `application/sparql-results+json`

_**Please note:** Sesame's binary RDF results table format is currently not
supported._

The following boolean result formats are accepted:

* Plain-text boolean result formats
  * MIME type: `text/boolean`

Sesame API URL Overview
-----------------------

The root API URL (`http://api.dydra.com/`) serves as the base Sesame API
endpoint URL. This is referred to as the `<SESAME_URL>` in the original Sesame API
documentation as well as this documentation page.

Your repository ID, referred to here as `<REPO_ID>`, is a combination of your
account name and the repository name separated by a forward slash ("`/`").  For example,
the repository ID for jhacker's FOAF repository is `jhacker/foaf`.

_**Please note:** If your repository name contains special characters, capitalized letters,
spaces, or punctuation, a slug will be automatically generated for your repository that
sanitizes the name so it can be used in a URL.  This full repository ID can be found using the
repository list method (8.3) described below._

Dydra currently supports the following Sesame API methods:

* 8.2 Protocol summary
  * `GET /protocol`
* 8.3 Repository list
  * `GET /repositories`
* 8.4 Repository queries
  * `GET /repositories/<REPO_ID>`
  * `POST /repositories/<REPO_ID>`
* 8.5 Repository statements
  * `GET /repositories/<REPO_ID>/statements`
  * `POST /repositories/<REPO_ID>/statements`
  * `PUT /repositories/<REPO_ID>/statements`
  * `DELETE /repositories/<REPO_ID>/statements`
* 8.6 Context lists
  * `GET /repositories/<REPO_ID>/contexts`
* 8.7 Namespace declaration lists
  * `GET /repositories/<REPO_ID>/namespaces`
  * `DELETE /repositories/<REPO_ID>/namespaces`
* 8.8 Namespace declarations
  * `GET /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * `PUT /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * `DELETE /repositories/<REPO_ID>/namespaces/<PREFIX>`
* 8.9 Repository Size
  * `GET /repositories/<REPO_ID>/size`

Dydra also implements several additional API methods as documented below:

* Create a repository
  * `PUT /repositories/<REPO_ID>`
* Delete a repository
  * `DELETE /repositories/<REPO_ID>`
* Get repository metadata
  * `GET /repositories/<REPO_ID>/meta`
* Update repository metadata
  * `PUT /repositories/<REPO_ID>/meta`
* Repository import status
  * `GET /repositories/<REPO_ID>/status`
* Current list of active operations
  * `GET /ops`
* Status of a single operation
  * `GET /ops/<JOB_ID>`

Protocol Summary (8.2)
----------------------

**Request Path:**

* `GET /protocol`
  * Returns the current protocol version implemented by Dydra.

**Curl Example: Obtaining the current protocol version**

    $ curl http://api.dydra.com/protocol

**Example Request**

    GET /protocol HTTP/1.1
    Host: dydra.com

**Example Response**

    HTTP/1.1 200 OK
    Content-Type: text/plain; charset=utf-8
    Content-Length: 1

    4

Repository List (8.3)
---------------------

**Request Paths:**

* `GET /repositories`
* `GET /repositories/<account>`

The first path will return all repositories visible to you. This includes
public repositories. The second form filters the repositories to the account
specified. (See repository permissions document)

**Curl Example: Showing all repositories**

    $ curl -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/repositories

**Example Request**

    GET /repositories HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

**Example Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    <?xml version='1.0' encoding='UTF-8'?>
    <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
      <head>
        <variable name='uri'/>
        <variable name='id'/>
        <variable name='title'/>
        <variable name='readable'/>
        <variable name='writable'/>
      </head>
      <results ordered='false' distinct='false'>
        <result>
          <binding name='uri'>
            <uri>http://api.dydra.com/jhacker/foaf</uri>
          </binding>
          <binding name='id'>
            <literal>jhacker/foaf</literal>
          </binding>
          <binding name='title'>
            <literal>foaf</literal>
          </binding>
          <binding name='readable'>
            <literal datatype='http://www.w3.org/2001/XMLSchema#boolean'>true</literal>
          </binding>
          <binding name='writable'>
            <literal datatype='http://www.w3.org/2001/XMLSchema#boolean'>false</literal>
          </binding>
        </result>
      </results>
    </sparql>

**Curl Example: Showing repositories for one account**

    $ curl -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/repositories/jhacker

**Example Request**

    GET /repositories/jhacker HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

**Example Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    [SPARQL XML BINDINGS]

Repository Queries (8.4)
------------------------

**Request Paths:**

* `GET /repositories/<REPO_ID>`
* `POST /repositories/<REPO_ID>`

_**Please note:** At this time, Dydra does not currently support the SeRQL query syntax. All
queries will assume the SPARQL syntax._

_**Please note:** the `queryLn`, `infer`, and `$<varname>` parameters are not yet supported for
this method._

**Curl Example: Querying a repository**

    $ curl -H 'Accept: application/sparql-results+xml' \
           -d 'query=select * where {?s ?p ?o}' \
           http://api.dydra.com/repositories/jhacker/foaf

**Example Request**

    POST /repositories/jhacker/foaf HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

    query=select%20*%20where%20%7B%3Fs%20%3Fp%20%3Fo%7D

**Example Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    [SPARQL XML BINDINGS]

Repository Statements (8.5)
---------------------------

**Parameters:**

* `subj` (optional): Restricts a GET or DELETE operation to statements with the specified N-Triples encoded resource as subject.
* `pred` (optional): Restricts a GET or DELETE operation to statements with the specified N-Triples encoded URI as predicate.
* `obj` (optional): Restricts a GET or DELETE operation to statements with the specified N-Triples encoded value as object.
* `context` (optional): If specified, restricts the operation to one or more specific contexts in the repository. The value of this parameter is either an N-Triples encoded URI or bnode ID, or the special value 'null' which represents all context-less statements. If multiple 'context' parameters are specified, the request will operate on the union of all specified contexts. The operation is executed on all statements that are in the repository if no context is specified.
* `baseURI` (optional): Specifies the base URI to resolve any relative URIs found in uploaded data against. This parameter only applies to the PUT and POST method.
* `url` (optional): Specifies the URL to import from. This parameter only applies to the PUT and POST method. _**This a Dydra extension of the standard Sesame API.**_
* `file` (optional): An HTML multipart/form-data encoded file containing the triples to import into the repository. This parameter only applies to the PUT and POST method. _**This a Dydra extension of the standard Sesame API.**_

_**Please note:**_

* The `infer` parameter specified in the Sesame API documentation is not presently supported.
* Transaction documents are currently not supported.
* As an extension to the standard Sesame API, Dydra also supports importing data into a repository using the `file` or `url` parameters mentioned above. Only one import method can be used at a time.

**Request Paths:**

* `GET /repositories/<REPO_ID>/statements`
  * Fetches statements from the repository.
* `POST /repositories/<REPO_ID>/statements`
  * Adds given triples to the repository.
* `PUT /repositories/<REPO_ID>/statements`
  * Updates or adds the given triples to the repository.
* `DELETE /repositories/<REPO_ID>/statements`
  * Removes statements from the repository.

**Curl Example: Fetching all statements from a repository as N-Triples**

    $ curl -H 'Accept: text/plain' \
           http://api.dydra.com/repositories/jhacker/foaf/statements

**Example Request**

    GET /repositories/jhacker/foaf/statements HTTP/1.1
    Host: dydra.com
    Accept: text/plain

**Example Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: chunked
    Content-Type: text/plain; charset=utf-8

    [N-TRIPLES RDF DOCUMENT]

**Curl Example: Adding N-Triples statements to a repository**

    $ curl -H 'Content-Type: text/plain' \
           -d '<http://example.org#jhacker> <http://xmlns.com/foaf/0.1/nick> "jhuckabee" .' \
           http://api.dydra.com/repositories/jhacker/foaf/statements

**Example Request**

    POST /repositories/jhacker/foaf/statements HTTP/1.1
    Host: dydra.com
    Content-Type: text/plain

    <http://example.org#jhacker> <http://xmlns.com/foaf/0.1/nick> "jhuckabee" .

**Example Response**

    HTTP/1.1 204 NO CONTENT

**Curl Example: Adding N-Triples statements to a repository via file upload**

    $ curl -F "file=@data.nt" \
           http://api.dydra.com/repositories/jhacker/foaf/statements

**Example Request**

    POST /repositories/jhacker/foaf/statements HTTP/1.1
    Host: dydra.com
    Content-Type: multipart/form-data; boundary=AaB03x

    --AaB03x
    Content-Disposition: form-data; name="file"; filename="data.nt"
    Content-Type: text/plain

    ... contents of data.nt ...
    --AaB03x--

**Example Response**

    HTTP/1.1 204 NO CONTENT

**Curl Example: Adding N-Triples statements to a repository via URL**

    $ curl -d "url=http://datagraph.org/jhacker/foaf.nt" \
           http://api.dydra.com/repositories/jhacker/foaf/statements

**Example Request**

    POST /repositories/jhacker/foaf/statements HTTP/1.1
    Host: dydra.com
    Content-Type: application/x-www-form-urlencoded

    url=http%3A%2F%2Fdatagraph.org%2Fjhacker%2Ffoaf.nt

**Example Response**

    HTTP/1.1 204 NO CONTENT

Context Lists (8.6)
-------------------

**Request Path:**

* `GET /repositories/<REPO_ID>/contexts`
  * List all contexts contained within the repository.

**Curl Example: Obtaining all contexts in a repository**

    $ curl -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/repositories/jhacker/foaf/contexts

**Example Request**

    GET /repositories/jhacker/foaf/contexts HTTP/1.1
    Host: dydra.com
    Content-Type: application/sparql-results+xml

**Example Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: cunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    <?xml version='1.0' encoding='UTF-8'?>
    <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
      <head>
        <variable name='contextID'/>
      </head>
      <results ordered='false' distinct='false'>
        <result>
          <binding name='contextID'>
            <uri>urn:x-local:graph1</uri>
          </binding>
        </result>
      </results>
    </sparql>

Namespace Declaration Lists (8.7)
---------------------------------

_**Please note:** In addition to repository level namespace definitions, Dydra
also supports account-level namespace definitions which apply across all repositories
belonging to that account.  The namespace API methods mentioned here and in section 8.8
refer only to those namespaces declared on the repository.  See the
[namespace prefixes](/namespace-prefixes) documentation for more details._

**Request Paths:**

* `GET /repositories/<REPO_ID>/namespaces`
  * Get all namespaces defined for the given repository.
* `DELETE /repositories/<REPO_ID>/namespaces`
  * Remove all namespaces from the given repository.

**Curl Example, obtaining all namespaces defined for a given repository**

    $ curl -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/repositories/jhacker/foaf/namespaces

**Example Request**

    GET /repositories/jhacker/foaf/namespaces HTTP/1.1
    Host: dydra.com
    Content-Type: application/sparql-results+xml

**Example Response**

    HTTP/1.1 200 OK
    Transfer-Encoding: cunked
    Content-Type: application/sparql-results+xml; charset=utf-8

    <?xml version='1.0' encoding='UTF-8'?>
    <sparql xmlns='http://www.w3.org/2005/sparql-results#'>
      <head>
        <variable name='prefix'/>
        <variable name='namespace'/>
      </head>
      <results ordered='false' distinct='false'>
        <result>
          <binding name='prefix'>
            <literal>rdf</literal>
          </binding>
          <binding name='namespace'>
            <literal>http://www.w3.org/1999/02/22-rdf-syntax-ns#</literal>
          </binding>
        </result>
      </results>
    </sparql>

**Curl Example, clearing all namespaces in a repository**

    $ curl -X DELETE -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/repositories/jhacker/foaf/namespaces

**Example Request**

    DELETE /repositories/jhacker/foaf/namespaces HTTP/1.1
    Host: dydra.com

**Example Response**

    HTTP/1.1 204 NO CONTENT

Namespace Declarations (8.8)
----------------------------

**Request Paths:**

* `GET /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * Returns the identifier for the given prefix.
* `PUT /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * Updates or adds the identified prefix.
* `DELETE /repositories/<REPO_ID>/namespaces/<PREFIX>`
  * Remove the prefixes from the repository prefix list.

**Curl Example: Obtaining the identifier for a specific namespace**

    $ curl http://api.dydra.com/repositories/jhacker/foaf/namespaces/rdf

**Example Request**

    GET /repositories/jhacker/foaf/namespaces/rdf HTTP/1.1
    Host: dydra.com

**Example Response**

    HTTP/1.1 200 OK
    Content-Type: text/plain; charset=utf-8

    http://www.w3.org/1999/02/22-rdf-syntax-ns#

**Curl Example: Updating or adding a namespace**

    $ curl -X PUT -d 'http://example.org#' \
           http://api.dydra.com/repositories/jhacker/foaf/namespaces/example

**Example Request**

    PUT /repositories/jhacker/foaf/namespaces/example HTTP/1.1
    Host: dydra.com

    http://example.org#

**Example Response**

    HTTP/1.1 204 NO CONTENT

**Curl Example: Removing a namespace from a repository**

    $ curl -X DELETE http://api.dydra.com/repositories/jhacker/foaf/namespaces/example

**Example Request**

    DELETE /repositories/jhacker/foaf/namespaces/example HTTP/1.1
    Host: dydra.com

**Example Response**

    HTTP/1.1 204 NO CONTENT

Repository Size (8.9)
---------------------

**Request Path:**

* `GET /repositories/<REPO_ID>/size`
  * Returns the total number of triples in the repository.

_**Please note:** Dydra's implementation of this method currently does not support the `context` parameter specified in the Sesame API spec._

**Curl Example, Obtaining the number of triples in a repository**

    $ curl http://api.dydra.com/repositories/jhacker/foaf/size

**Example Request**

    GET /repositories/jhacker/foaf/size HTTP/1.1
    Host: dydra.com

**Example Response**

    HTTP/1.1 200 OK
    Content-Type: text/plain

    123456

Creating a Repository
---------------------

**Parameters:**

* `summary` (optional): A summary of the data contained within the repository.
* `homepage` (optional): A URL to the repository's home page.
* `description` (optional): A long form description the repository. This description can contain Markdown formatting.

**Request Path:**

* `PUT /repositories/<REPO_ID>`
  * Creates a new repository

**Curl Example: Creating a new repository**

    $ curl -X PUT -H 'Accept: application/sparql-results+json' \
           -d "summary=A test summary." \
           http://api.dydra.com/repositories/jhacker/foaf

**Example Request**

    PUT /repositories/jhacker/foaf HTTP/1.1
    Host: dydra.com

    summary=A%20test%20summary.

**Example Response**

    HTTP/1.1 204 NO CONTENT

Deleting a Repository
---------------------

**Request Path:**

* `DELETE /repositories/<REPO_ID>`
  * Deletes a repository

**Curl Example: Deleting a repository**

    $ curl -X DELETE -H 'Accept: text/plain' \
           http://api.dydra.com/repositories/jhacker/xyz_repository

**Example Request**

    DELETE /repositories/jhacker/foaf HTTP/1.1
    Host: dydra.com

**Example Response**

    HTTP/1.1 204 NO CONTENT

Repository Metadata
-------------------

**Request Path:**

* `GET /repositories/<REPO_ID>/meta`
  * Obtain repository metadata

**Curl Example: Getting repository metadata**

    $ curl -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/repositories/jhacker/xyz_repository/meta

**Example Request**

    GET /repositories/jhacker/foaf/meta HTTP/1.1
    Accept: application/sparql-results+xml
    Host: dydra.com

**Example Response**

    HTTP/1.1 200 OK

    <?xml version="1.0" encoding="UTF-8"?>
    <sparql xmlns="http://www.w3.org/2005/sparql-results#">
      <head>
        <variable name="uri"/>
        <variable name="id"/>
        <variable name="title"/>
        <variable name="readable"/>
        <variable name="writeable"/>
        <variable name="summary"/>
        <variable name="description"/>
        <variable name="homepage"/>
        <variable name="triple_count"/>
        <variable name="byte_size"/>
      </head>
      <results ordered="false" distinct="false">
        <result>
          <binding name="uri">
            <uri>http://api.dydra.com/jhacker/foaf</uri>
          </binding>
          <binding name="id">
            <literal>jhacker/foaf</literal>
          </binding>
          <binding name="title">
            <literal>foaf</literal>
          </binding>
          <binding name="readable">
            <literal datatype="http://www.w3.org/2001/XMLSchema#boolean">true</literal>
          </binding>
          <binding name="writeable">
            <literal datatype="http://www.w3.org/2001/XMLSchema#boolean">true</literal>
          </binding>
          <binding name="summary">
            <literal></literal>
          </binding>
          <binding name="description">
            <literal></literal>
          </binding>
          <binding name="homepage">
            <uri>http://api.dydra.com/jhacker/foaf</uri>
          </binding>
          <binding name="triple_count">
            <literal>14</literal>
          </binding>
          <binding name="byte_size">
            <literal>4224</literal>
          </binding>
        </result>
      </results>
    </sparql>

Updating Repository Metadata
----------------------------

**Parameters:**

* `summary` (optional): A summary of the data contained within the repository.
* `homepage` (optional): A URL to the repository's home page.
* `description` (optional): A long form description the repository. This description can contain markdown formatting.

**Request Path:**

* `PUT /repositories/<REPO_ID>/meta`
  * Updating repository metadata

**Curl Example: Updating repository metadata**

    $ curl -X PUT -d "summary=A test summary." \
           http://api.dydra.com/repositories/jhacker/xyz_repository/meta

**Example Request**

    PUT /repositories/jhacker/foaf/meta HTTP/1.1
    Host: dydra.com

    summary=A%20test%20summary.

**Example Response**

    HTTP/1.1 204 NO CONTENT

Repository Import Status
------------------------

**Request Path:**

* `GET /repositories/<REPO_ID>/status`
  * Returns the import status for the given repository.

**Curl Example, Obtaining the import status of a repository**

    $ curl http://api.dydra.com/repositories/jhacker/foaf/status

**Example Request**

    PUT /repositories/jhacker/foaf/status HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

**Example Response**

    HTTP/1.1 200 OK
    Content-Type: application/sparql-results+xml

    <?xml version="1.0" encoding="UTF-8"?>
    <sparql xmlns="http://www.w3.org/2005/sparql-results#">
      <head>
        <variable name="uuid"/>
        <variable name="status"/>
        <variable name="working"/>
        <variable name="time"/>
        <variable name="message"/>
        <variable name="percent"/>
      </head>
      <results ordered="false" distinct="false">
        <result>
          <binding name="uuid">
            <literal>efa56560-5e18-012e-47b0-002332b96472</literal>
          </binding>
          <binding name="status">
            <literal>completed</literal>
          </binding>
          <binding name="working">
            <literal datatype="http://www.w3.org/2001/XMLSchema#boolean">false</literal>
          </binding>
          <binding name="time">
            <literal>2011-05-10 09:23:32 -0700</literal>
          </binding>
          <binding name="message">
            <literal>Completed at 2011-05-10 09:24:37 -0700</literal>
          </binding>
          <binding name="percent">
            <literal datatype="http://www.w3.org/2001/XMLSchema#integer">100</literal>
          </binding>
        </result>
      </results>
    </sparql>

Operations List
---------------

**Request Path:**

* `GET /ops`
  * Returns a list of active operations for the authenticated account.

**Curl Example, Obtaining a list of active operations**

    $ curl -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/ops

**Example Request**

    GET /ops HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

**Example Response**

    HTTP/1.1 200 OK
    Content-Type: application/sparql-results+xml

    <?xml version="1.0" encoding="UTF-8"?>
    <sparql xmlns="http://www.w3.org/2005/sparql-results#">
      <head>
        <variable name="uuid"/>
        <variable name="status"/>
        <variable name="working"/>
        <variable name="time"/>
        <variable name="message"/>
        <variable name="percent"/>
      </head>
      <results ordered="false" distinct="false">
        <result>
          <binding name="uuid">
            <literal>efa56560-5e18-012e-47b0-002332b96472</literal>
          </binding>
          <binding name="status">
            <literal>completed</literal>
          </binding>
          <binding name="working">
            <literal datatype="http://www.w3.org/2001/XMLSchema#boolean">false</literal>
          </binding>
          <binding name="time">
            <literal>2011-05-10 09:23:32 -0700</literal>
          </binding>
          <binding name="message">
            <literal>Completed at 2011-05-10 09:24:37 -0700</literal>
          </binding>
          <binding name="percent">
            <literal datatype="http://www.w3.org/2001/XMLSchema#integer">100</literal>
          </binding>
        </result>
      </results>
    </sparql>

Operation Status
----------------

**Request Path:**

* `GET /ops/<JOB_ID>`
  * Returns status of a single operation.

**Curl Example, Obtaining the status of a single operation**

    $ curl -H 'Accept: application/sparql-results+xml' \
           http://api.dydra.com/ops/efa56560-5e18-012e-47b0-002332b96472

**Example Request**

    GET /ops/efa56560-5e18-012e-47b0-002332b96472 HTTP/1.1
    Host: dydra.com
    Accept: application/sparql-results+xml

**Example Response**

    HTTP/1.1 200 OK
    Content-Type: application/sparql-results+xml

    <?xml version="1.0" encoding="UTF-8"?>
    <sparql xmlns="http://www.w3.org/2005/sparql-results#">
      <head>
        <variable name="uuid"/>
        <variable name="status"/>
        <variable name="working"/>
        <variable name="time"/>
        <variable name="message"/>
        <variable name="percent"/>
      </head>
      <results ordered="false" distinct="false">
        <result>
          <binding name="uuid">
            <literal>efa56560-5e18-012e-47b0-002332b96472</literal>
          </binding>
          <binding name="status">
            <literal>completed</literal>
          </binding>
          <binding name="working">
            <literal datatype="http://www.w3.org/2001/XMLSchema#boolean">false</literal>
          </binding>
          <binding name="time">
            <literal>2011-05-10 09:23:32 -0700</literal>
          </binding>
          <binding name="message">
            <literal>Completed at 2011-05-10 09:24:37 -0700</literal>
          </binding>
          <binding name="percent">
            <literal datatype="http://www.w3.org/2001/XMLSchema#integer">100</literal>
          </binding>
        </result>
      </results>
    </sparql>

[Sesame 2.0 HTTP API]: http://www.openrdf.org/doc/sesame2/system/ch08.html
