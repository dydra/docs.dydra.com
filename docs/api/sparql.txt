SPARQL Endpoints
================

Every Dydra repository is also a SPARQL endpoint. If you're not familiar with the
SPARQL language, we have an [introduction](/sparql).

Your repository's SPARQL endpoint is found by appending `/sparql` to the
repository's URL. So a user `jhacker` who created a repository named `foaf`
would have a SPARQL endpoint located at `http://dydra.com/jhacker/foaf/sparql`.

### Authentication

Please see the [API Authentication](/api/authentication) documentation
for a reference on authenticating SPARQL request.

### Dydra's SPARQL Dialect

Like all SPARQL implementations, Dydra's has some quirks. Unlike all SPARQL
implementations, our canonical description is a [set of executable
tests](http://github.com/dydra/sparql-tests), written in
[RSpec](http://rspec.info).

##### Features

We're always interested in [your feedback](http://getsatisfaction.com/dydra)
about our feature set.

##### SPARQL versions

Dydra's SPARQL processor is mostly SPARQL 1.0 conformant and supports some features of
SPARQL 1.1. As we implement new features, we'll [blog about it.](http://blog.dydra.com) 

##### Blank Node Handling

Dydra treats blank node identifiers as canonical. When data is imported,
existing blank node identifiers are saved, and new, canonical blank node
identifiers are created for new nodes. In practice, this is quite useful: the
output of one query can be matched with another.

##### Normalization

Dydra is a graph store (as opposed to a document store).  We store the semantic
representations of numerics, dates, and times. The result is that several of
these formats do not round-trip. For example, data imported as
`"01"^^XSD.integer` would be returned as `"1"^^XSD.integer`. See the [Dydra
reference tests](http://github.com/dydra/sparql-tests) for more detail.


