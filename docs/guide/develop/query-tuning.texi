@subsection Tuning Queries
@cindex query, tuning
@cindex performance

SPARQL is a powerful query language, and as such it is easy to write complex
queries that require a great deal of computing power to execute. As both
query execution time and billing directly depend on how much processing a
query requires, it is useful to understand some of Dydra's key performance
characteristics. With larger datasets, simple changes to a query can result
in a significant performance improvement.

This section describes several factors that strongly influence the execution
time and cost of queries, and explains a number of tips and tricks that will
help you tune your queries for optimal application performance and a reduced
monthly bill.

Note that the following may contain too much detail if you are casually
using Dydra for typical and straightforward use cases. You probably won't
need these tips until you are dealing with large datasets or complex
queries. Nonetheless, you may still find it interesting to at least glance
over this material.

@subsubsection @code{SELECT} Queries
@cindex SELECT

A general tip for @code{SELECT} queries is to avoid unnecessarily projecting
variables you won't actually use. That is, if your query's @code{WHERE}
clause binds the variables @code{?a}, @code{?b}, and @code{?c}, but you
actually only ever use @code{?b} when iterating over the solution sequence
in your application, then you might want to avoid specifying the query in
either of the following two forms:

@example
@group
SELECT * WHERE @{ ... @}
SELECT ?a ?b ?c WHERE @{ ... @}
@end group
@end example

Rather, it is better to be explicit and project just the variables you
actually intend to use:

@example
@group
SELECT ?b WHERE @{ ... @}
@end group
@end example

The above has two benefits. Firstly, Dydra's query processing will apply
more aggressive optimizations knowing that the values of the variables
@code{?a} and @code{?c} will not actually be returned in the solution
sequence. Secondly, the size of the solution sequence itself, and hence the
network use necessary for your application to retrieve it, is reduced by not
including superfluous values. The combination of these two factors can make
a big performance difference for complex queries returning large solution
sequences.

If you remember just one thing from this subsection, remember this:
@code{SELECT *} is a useful shorthand when manually executing queries, but
not something that you should much want to use in a production application
dealing with complex queries on non-trivial amounts of data.

Remember, also, that SPARQL provides an @code{ASK} query form. If all you
need to know is whether a query matches something or not, use an @code{ASK}
query instead of a @code{SELECT} query. This enables the query to be
optimized more aggressively, and instead of a solution sequence you will get
back a simple boolean value indicating whether the query matched or not,
minimizing the data transferred in response to your query.

@subsubsection The @code{ORDER BY} Clause
@cindex ORDER BY

The @code{ORDER BY} clause can be very useful when you want your solution
sequence to be sorted. It is important to realize, though, that @code{ORDER
BY} is a relatively heavy operation, as it requires the query processing to
materialize and sort a full intermediate solution sequence, which prevents
Dydra from returning initial results to you until all results are available.

This does not mean that you should avoid using @code{ORDER BY} when it
serves a purpose. If you need your query results sorted by particular
criteria, it is best to let Dydra do that for you rather than manually
sorting the data in your application. After all, that is why @code{ORDER BY}
is there. However, if the solution sequence is large, and if the latency to
obtain the initial solutions is important (sometimes known as the
"time-to-first-solution" factor), you may wish to consider whether you in
fact need an @code{ORDER BY} clause or not.

@subsubsection The @code{OFFSET} Clause
@cindex OFFSET

Dydra's query processing guarantees that a query solution sequence has a
consistent and deterministic ordering even in the absence of an @code{ORDER
BY} clause. This has an important and useful consequence: the results of an
@code{OFFSET} clause are always repeatable, whether or not the query has an
@code{ORDER BY} clause.

Concretely, this means that if you have a query containing an @code{OFFSET}
clause, and you execute that query multiple times in succession, you will
get the same solution sequence in the same order each time. This is not a
universal property of SPARQL implementations, but you can rely on it with
Dydra.

This feature facilitates, for example, paging through a large solution
sequence using an @code{OFFSET} and @code{LIMIT} clause combination, without
needing @code{ORDER BY}. So, again, don't use an @code{ORDER BY} clause
unnecessarily if you merely want to page through the solution sequence (say)
a hundred solutions at a time.

@subsubsection The @code{LIMIT} Clause
@cindex LIMIT

Always ensure that your queries include a @code{LIMIT} clause whenever
possible. If your application only needs the first 100 query solutions,
specify a @code{LIMIT 100}. This puts an explicit upper bound on the amount
of work to be performed in answering your query.

Note, however, that if your query contains both @code{ORDER BY} and
@code{LIMIT} clauses, query processing must always construct and examine the
full solution sequence in order to sort it. Therefore the amount of
processing needed is not actually reduced by a @code{LIMIT} clause in this
case. Still, limiting the size of the ordered solution sequence with an
explicit @code{LIMIT} improves performance by reducing network use.

@subsubsection @code{FILTER} Expressions
@cindex FILTER

An effective way to constrain query execution time is to include one or more
@code{FILTER} expressions in the query.

@subsubsection The @code{sameTerm} Function
@cindex sameTerm

It is common for @code{FILTER} expressions to contain an equality or
inequality comparison:

@example
@group
SELECT ?a ?b WHERE @{ ... FILTER(?a = ?b) @}
SELECT ?a ?b WHERE @{ ... FILTER(?a != ?b) @}
@end group
@end example

Queries like the preceding can often be optimized by substituting the
standard @code{sameTerm} function
@footnote{@url{http://www.w3.org/TR/rdf-sparql-query/#func-sameTerm}}
in place of the equality or inequality operator
@footnote{@url{http://www.w3.org/TR/rdf-sparql-query/#func-RDFterm-equal}},
as follows:

@example
@group
SELECT ?a ?b WHERE @{ ... FILTER(sameTerm(?a, ?b)) @}
SELECT ?a ?b WHERE @{ ... FILTER(!sameTerm(?a, ?b)) @}
@end group
@end example

@code{sameTerm} is always faster than equality comparison, as it has simpler
semantics that enable query processing to perform less work. In the case of
complex queries, a @code{sameTerm} comparison can sometimes enable the query
to execute significantly faster than a corresponding query using equality
comparison.
@footnote{For example, query Q5a from the SP@math{^2}Bench benchmark suite
executes some 500% faster after substituting @code{sameTerm(?name, ?name2)}
in place of the @code{?name = ?name2} equality comparison in its
@code{FILTER} expression.}

However, since its semantics @emph{are} subtly different, @code{sameTerm}
isn't appropriate for every use case; in particular for numeric comparisons
it is best to stick with the equality and inequality operators, as
@code{sameTerm} would give surprising results when comparing two otherwise
equal literals that represent the same numeric value but differ in their
exact datatypes. For more details on the particular semantics of
@code{sameTerm} and equality comparison, refer to the official SPARQL
specification.
